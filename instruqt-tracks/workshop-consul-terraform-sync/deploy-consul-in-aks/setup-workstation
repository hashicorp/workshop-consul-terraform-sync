#!/bin/bash

#dirs
mkdir /root/helm
mkdir /root/policies
set-workdir /root/helm

#creds
vault login -method=userpass username=operations password=Password1
export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)

#k8s config
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv ./kubectl /usr/local/bin/kubectl
mkdir ~/.kube
terraform output -state /root/terraform/aks/terraform.tfstate aks_kube_config > ~/.kube/config
curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

#ambassador secrets
cat << EOF > /root/policies/ambassador.hcl
service "ambassador" {
  policy = "write"
}
EOF
consul acl policy create -name "ambassador" -description "ambassador connect" -rules @/root/policies/ambassador.hcl
kubectl create namespace ambassador
kubectl create secret -n ambassador generic ambassador-acl-token --from-literal=token=$(consul acl token create  -policy-name ambassador  -format=json | jq -r .SecretID)

#ambassador
kubectl apply -f https://www.getambassador.io/yaml/aes-crds.yaml && \
kubectl wait --for condition=established --timeout=90s crd -lproduct=aes && \
kubectl apply -f /root/ambassador/aes.yaml
kubectl apply -n ambassador -f /root/ambassador/consul-connector.yaml
cat <<EOF | kubectl apply -f -
apiVersion: getambassador.io/v2
kind: Host
metadata:
  name: ambassador-host
spec:
  hostname: ""
  acmeProvider:
    authority: none
  requestPolicy:
    insecure:
      action: Route
      additionalPort: 8080
EOF

#helm chart values
helm repo add hashicorp https://helm.releases.hashicorp.com
endpoint=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/$(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name)/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulConfigFile | base64 -d | jq -r .retry_join[0])
cat << EOF > /root/helm/aks.yaml
global:
  image: 'hashicorp/consul-enterprise:1.8.0-ent'
  domain: consul
  datacenter: east-us
  tls:
    enabled: true
    enableAutoEncrypt: true
    caCert:
      secretName: hashicorp-consul-ca-cert
      secretKey: tls.crt
  acls:
    manageSystemACLs: false
  gossipEncryption:
    secretName: hashicorp-consul-gossip-key
    secretKey: key
externalServers:
  enabled: true
  hosts: ["${endpoint}"]
  httpsPort: 443
  useSystemRoots: true
server:
  enabled: false
client:
  enabled: true
  join: ["${endpoint}"]
  extraVolumes:
  - type: 'secret'
    name: 'hashicorp-consul-acl-config'
    load: true
syncCatalog:
  enabled: true
  default: false
  toConsul: true
  toK8S: false
  aclSyncToken :
    secretName: hashicorp-consul-connect-inject-acl-token
    secretKey: token
connectInject:
  enabled: true
  default: false
  k8sAllowNamespaces: ["default"]
  aclInjectToken:
    secretName: hashicorp-consul-connect-inject-acl-token
    secretKey: token
  overrideAuthMethodName: hashicorp-consul-k8s-auth-method
EOF
#helm install hashicorp hashicorp/consul -f aks.yaml --namespace consul --wait --debug

#script to add secrets
cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-secrets
#!/bin/bash -xe
resource_group=$1
managed_app=$2
cluster=$3
gossip_key=$4
acl_token=$5
injection_token=$6
acl_string=$( jq -n \
                  --arg token "$acl_token" \
                  '{acl: { enabled: true, enable_token_persistence: true, default_policy: "deny", tokens: { agent: $token } } }' )
#base64 the secrets
gossip_key=$(echo -n $gossip_key | base64 -w 0)
acl_token=$(echo -n  $acl_token | base64 -w 0)
injection_token=$(echo -n  $injection_token | base64 -w 0)
acl_config=$(echo -n $acl_string | base64 -w 0)
ca=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/${resource_group}/providers/Microsoft.Solutions/applications/${managed_app}/customconsulClusters/${cluster}" --api-version 2018-09-01-preview | jq -r .properties.consulCaFile)
#create the consul namespace
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: consul
EOF
#acl config
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-acl-config
  namespace: consul
type: Opaque
data:
  acl.json: $acl_config
EOF
#tls cert
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-ca-cert
  namespace: consul
type: Opaque
data:
  tls.crt: $ca
EOF
#add the gosip key
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-gossip-key
type: Opaque
data:
  key: $gossip_key
EOF
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-connect-inject-acl-token
type: Opaque
data:
  token: $injection_token
EOF
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-secrets
#setup-k8s-consul-secrets $(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name) hcs hashicorp-consul-cluster $(vault kv get -field gossip_key secret/consul) $(vault kv get -field master_token secret/consul) $(vault kv get -field master_token secret/consul)

cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-auth
cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hashicorp-consul-connect-injector-authmethod-svc-account
  namespace: consul
  labels:
    app: consul
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hashicorp-consul-connect-injector-authmethod-role
  namespace: consul
  labels:
    app: consul
rules:
  - apiGroups: [""]
    resources:
      - serviceaccounts
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hashicorp-consul-connect-injector-authmethod-authdelegator-role-binding
  namespace: consul
  labels:
    app: consul
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "system:auth-delegator"
subjects:
  - kind: ServiceAccount
    name: hashicorp-consul-connect-injector-authmethod-svc-account
    namespace: consul
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hashicorp-consul-connect-injector-authmethod-serviceaccount-role-binding
  namespace: consul
  labels:
    app: consul
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "hashicorp-consul-connect-injector-authmethod-role"
subjects:
  - kind: ServiceAccount
    name: hashicorp-consul-connect-injector-authmethod-svc-account
    namespace: consul
EOF
k8s_host=$(terraform output -state /root/terraform/aks/terraform.tfstate aks_cluster_host)
k8s_ca=$(terraform output -state /root/terraform/aks/terraform.tfstate aks_cluster_ca| base64 -d)
k8s_sa=$(kubectl  get sa -n consul hashicorp-consul-connect-injector-authmethod-svc-account -o json | jq -r .secrets[0].name)
k8s_jwt=$(kubectl get secrets -n consul ${k8s_sa} -o json | jq -r .data.token | base64 -d)
consul acl auth-method create -type "kubernetes" \
    -name "hashicorp-consul-k8s-auth-method" \
    -description "k8s auth" \
    -kubernetes-host "${k8s_host}" \
    -kubernetes-ca-cert "${k8s_ca}" \
    -kubernetes-service-account-jwt "${k8s_jwt}"
consul acl binding-rule create -method 'hashicorp-consul-k8s-auth-method' \
    -description 'apps' \
    -bind-type 'service' \
    -bind-name '${serviceaccount.name}' \
    -selector 'serviceaccount.namespace==default'
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-auth

f5_admin_password=$(terraform output -state /root/terraform/bigip/terraform.tfstate admin_password)
f5_mgmt_url=$(terraform output -state /root/terraform/bigip/terraform.tfstate mgmt_url)

#bigip
kubectl create serviceaccount bigip-ctlr -n kube-system
cat <<EOF | kubectl apply -f -
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bigip-ctlr-clusterrole
rules:
- apiGroups: ["", "extensions"]
  resources: ["nodes", "services", "endpoints", "namespaces", "ingresses", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["", "extensions"]
  resources: ["configmaps", "events", "ingresses/status"]
  verbs: ["get", "list", "watch", "update", "create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bigip-ctlr-clusterrole-binding
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bigip-ctlr-clusterrole
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: bigip-ctlr
  namespace: kube-system
EOF

cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-bigip-ctlr-deployment
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-bigip-ctlr
  template:
    metadata:
      name: k8s-bigip-ctlr
      labels:
        app: k8s-bigip-ctlr
    spec:
      serviceAccountName: bigip-ctlr
      containers:
        - name: k8s-bigip-ctlr
          image: "f5networks/k8s-bigip-ctlr:2.0"
          command: ["/app/bin/k8s-bigip-ctlr"]
          args: [
            "--bigip-username=f5admin",
            "--bigip-password=${f5_admin_password}",
            "--bigip-url=${f5_mgmt_url}",
            "--bigip-partition=Kube",
            "--pool-member-type=nodeport",
            "--insecure=true",
            "--agent=as3",
            "--namespace=default",
            "--log-level=DEBUG",
            "--verify-interval=10",
            "--node-poll-interval=10",
            "--log-as3-response=true",
            "--as3-validation=false",
            ]
EOF


#wait for pods
kubectl wait -n ambassador --for=condition=available --timeout=120s deployment/ambassador
kubectl wait -n ambassador --for=condition=Ready $(kubectl get pod -n ambassador --selector=service=ambassador -o name)

kubectl wait -n kube-system --for=condition=available --timeout=120s deployment/k8s-bigip-ctlr-deployment
kubectl wait -n kube-system --for=condition=Ready $(kubectl get pod -n kube-system --selector=app=k8s-bigip-ctlr -o name)
exit 0
